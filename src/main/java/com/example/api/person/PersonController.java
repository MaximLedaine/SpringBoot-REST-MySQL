package com.example.api.person;


import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import javax.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.IanaLinkRelations;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;


@RestController
public class PersonController {
	@Autowired // This means to get the bean called PersonRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
  private PersonRepository repository;
  
  @Autowired
  private PersonsModelAssembler assembler;
  /**
   * Get persons.
   *
   * @param person the person
   * @return the person
   */
  @GetMapping(path="/persons")
  CollectionModel<EntityModel<Person>> all() {

    List<EntityModel<Person>> persons = StreamSupport.stream(repository.findAll().spliterator(), false)
          .map(assembler::toModel) //
          .collect(Collectors.toList());
  
    return CollectionModel.of(persons, 
    linkTo(methodOn(PersonController.class).all()).withSelfRel().withType("GET"),
    linkTo(methodOn(PersonController.class).save(new Person())).withRel("create").withType("POST")
    );
  }
  
   /**
   * Create person.
   *
   * @param person the person
   * @return the person
   */
  @PostMapping(path="/persons")
  ResponseEntity<?> save(@RequestBody @Validated(Person.CreateValidation.class) Person newPerson) {
  
    Person person = repository.save(newPerson);
    EntityModel<Person> entityModel = assembler.toModel(person);
  
    return ResponseEntity //
        .created(entityModel.getRequiredLink(IanaLinkRelations.SELF).toUri()) //
        .body(entityModel);
  }

  /**
   * create or update person.
   *
   * @param person the person
   * @return the person
   */
  @PutMapping("/persons/{id}")
  ResponseEntity<?> update(@RequestBody @Validated(Person.CreateValidation.class) Person newPerson, @PathVariable UUID id) {

    Person updatedPerson = repository.findById(id)
    .map(person -> {
      person.setFirstName(newPerson.getFirstName());
      person.setLastName(newPerson.getLastName());
      person.setEmail(newPerson.getEmail());
      person.setTelephone(newPerson.getTelephone());
      return repository.save(person);
    })
    .orElseGet(() -> {
      return repository.save(newPerson);
    });

  EntityModel<Person> entityModel = assembler.toModel(updatedPerson);

  return ResponseEntity //
      .created(entityModel.getRequiredLink(IanaLinkRelations.SELF).toUri()) //
      .body(entityModel);
  }

  /**
   * Get person.
   *
   * @param person the person
   * @return the person
   */
  @GetMapping(path="/persons/{id}")
  public EntityModel<Person> one(@PathVariable(value = "id") UUID id) throws EntityNotFoundException {
    Person person = repository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException());

    return assembler.toModel(person);
  }

  /**
   * Delete person.
   *
   * @param person the person
   * @return the person
   */
  @DeleteMapping("/persons/{id}")
  ResponseEntity<?> delete(@PathVariable(value = "id") UUID id) throws EntityNotFoundException {
    Person person = repository.findById(id)
              .orElseThrow(() -> new EntityNotFoundException());

    repository.delete(person);

    return ResponseEntity.noContent().build();
  }
}
