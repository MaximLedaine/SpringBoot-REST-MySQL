package com.example.api.location;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import javax.persistence.EntityNotFoundException;

import com.example.api.person.Person;
import com.example.api.person.PersonRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.IanaLinkRelations;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;

@RestController
public class LocationController {
    @Autowired // This means to get the bean called LocationRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private LocationRepository repository;

    @Autowired
    private PersonRepository personRepository;

    @Autowired
    private LocationModelAssembler assembler;
    /**
     * Get locations.
     *
     *
     * @return the location
     */
    @GetMapping(path="/locations")
    CollectionModel<EntityModel<Location>> all(@RequestParam(value = "personId" , required = false) UUID personId) throws EntityNotFoundException {

        List<EntityModel<Location>> locations;
        if(personId == null) {
            locations = StreamSupport.stream(repository.findAll().spliterator(), false)
                    .map(assembler::toModel) //
                    .collect(Collectors.toList());
        } else {
            // something like this
            // look at the locationDeviceRepository and visit the link
            Person person = personRepository.findById(personId)
                    .orElseThrow(() -> new EntityNotFoundException());
            List<Location> locationsByPerson = repository.findByContactPerson(person);

            locations = StreamSupport.stream(locationsByPerson.spliterator(), false)
                    .map(assembler::toModel) //
                    .collect(Collectors.toList());
        }

        return CollectionModel.of(locations,
                linkTo(methodOn(LocationController.class).all(null)).withSelfRel().withType("GET"),
                linkTo(methodOn(LocationController.class).save(new Location())).withRel("create").withType("POST")
        );
    }

    /**
     * Create location.
     *
     *
     * @return the location
     */
    @PostMapping(path="/locations")
    ResponseEntity<?> save(@RequestBody @Validated(Location.CreateValidation.class) Location newLocation) {
        Location location = repository.save(newLocation);
        EntityModel<Location> entityModel = assembler.toModel(location);

        return ResponseEntity //
                .created(entityModel.getRequiredLink(IanaLinkRelations.SELF).toUri()) //
                .body(entityModel);
    }

    /**
     * create or update location.
     *
     *
     * @return the location
     */
    @PutMapping("/locations/{id}")
    ResponseEntity<?> update(@RequestBody @Validated(Location.CreateValidation.class) Location newLocation, @PathVariable UUID id) {

        Location updatedLocation = repository.findById(id) //
                .map(location -> {
                    location.setName(newLocation.getName());
                    location.setStreet(newLocation.getStreet());
                    location.setCity(newLocation.getCity());
                    location.setZipCode(newLocation.getZipCode());
                    location.setCountry(newLocation.getCountry());
                    location.setContactPerson(newLocation.getContactPerson());
                    location.setLocationType(newLocation.getLocationType());
                    return repository.save(location);
                }) //
                .orElseGet(() -> {
                    return repository.save(newLocation);
                });

        EntityModel<Location> entityModel = assembler.toModel(updatedLocation);

        return ResponseEntity //
                .created(entityModel.getRequiredLink(IanaLinkRelations.SELF).toUri()) //
                .body(entityModel);
    }

    /**
     * Get location.
     *
     *
     * @return the location
     */
    @GetMapping(path="/locations/{id}")
    public EntityModel<Location> one(@PathVariable(value = "id") UUID id) throws EntityNotFoundException {
        Location location = repository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException());

        return assembler.toModel(location);
    }

    /**
     * Delete location.
     *
     *
     * @return the location
     */
    @DeleteMapping("/locations/{id}")
    ResponseEntity<?> delete(@PathVariable(value = "id") UUID id) throws EntityNotFoundException {
        Location location = repository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException());

        repository.delete(location);

        return ResponseEntity.noContent().build();
    }

}
