package com.example.api.measurementType;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import javax.persistence.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.IanaLinkRelations;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;

@RestController
public class MeasurementTypeController {
	@Autowired // This means to get the bean called MeasurementRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
  private MeasurementTypeRepository repository;
  
  @Autowired 
  private MeasurementTypeModelAssembler assembler;

  /**
   * Get measurementTypes.
   *
   * @param measurementType the measurementType
   * @return the measurementType
   */
  @GetMapping(path="/measurement-types")
  CollectionModel<EntityModel<MeasurementType>> all() {

    List<EntityModel<MeasurementType>> measurementTypes = StreamSupport.stream(repository.findAll().spliterator(), false)
          .map(assembler::toModel) //
          .collect(Collectors.toList());
  
    return CollectionModel.of(measurementTypes, 
    linkTo(methodOn(MeasurementTypeController.class).all()).withSelfRel().withType("GET"),
    linkTo(methodOn(MeasurementTypeController.class).save(new MeasurementType())).withRel("create").withType("POST")
    );
  }
  
   /**
   * Create measurementType.
   *
   * @param measurementType the measurementType
   * @return the measurementType
   */
  @PostMapping(path="/measurement-types")
  ResponseEntity<?> save(@RequestBody @Validated(MeasurementType.CreateValidation.class) MeasurementType newMeasurementType) {
  
    MeasurementType measurementType = repository.save(newMeasurementType);
    EntityModel<MeasurementType> entityModel = assembler.toModel(measurementType);
  
    return ResponseEntity //
        .created(entityModel.getRequiredLink(IanaLinkRelations.SELF).toUri()) //
        .body(entityModel);
  }

  /**
   * create or update measurementType.
   *
   * @param measurementType the measurementType
   * @return the measurementType
   */
  @PutMapping("/measurement-types/{id}")
  ResponseEntity<?> update(@RequestBody @Validated(MeasurementType.CreateValidation.class) MeasurementType newMeasurementType, @PathVariable UUID id) {

    MeasurementType updatedMeasurement = repository.findById(id)
    .map(measurementType -> {
      measurementType.setName(newMeasurementType.getName());
      return repository.save(measurementType);
    })
    .orElseGet(() -> {
      return repository.save(newMeasurementType);
    });

  EntityModel<MeasurementType> entityModel = assembler.toModel(updatedMeasurement);

  return ResponseEntity //
      .created(entityModel.getRequiredLink(IanaLinkRelations.SELF).toUri()) //
      .body(entityModel);
  }

  /**
   * Get measurementType.
   *
   * @param measurementType the measurementType
   * @return the measurementType
   */
  @GetMapping(path="/measurement-types/{id}")
  public EntityModel<MeasurementType> one(@PathVariable(value = "id") UUID id) throws EntityNotFoundException {
    MeasurementType measurementType = repository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException());

    return assembler.toModel(measurementType);
  }

  /**
   * Delete measurementType.
   *
   * @param measurementType the measurementType
   * @return the measurementType
   */
  @DeleteMapping("/measurement-types/{id}")
  ResponseEntity<?> delete(@PathVariable(value = "id") UUID id) throws EntityNotFoundException {
    MeasurementType measurementType = repository.findById(id)
              .orElseThrow(() -> new EntityNotFoundException());

    repository.delete(measurementType);

    return ResponseEntity.noContent().build();
  }
}
