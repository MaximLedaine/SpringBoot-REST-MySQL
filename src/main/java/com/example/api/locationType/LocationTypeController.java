package com.example.api.locationType;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import javax.persistence.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.IanaLinkRelations;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;

@RestController
public class LocationTypeController {
	@Autowired // This means to get the bean called LocationRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
  private LocationTypeRepository repository;
  
  @Autowired 
  private LocationTypeModelAssembler assembler;

  /**
   * Get locationTypes.
   *
   * @param locationType the locationType
   * @return the locationType
   */
  @GetMapping(path="/location-types")
  CollectionModel<EntityModel<LocationType>> all() {

    List<EntityModel<LocationType>> locationTypes = StreamSupport.stream(repository.findAll().spliterator(), false)
          .map(assembler::toModel) //
          .collect(Collectors.toList());
  
    return CollectionModel.of(locationTypes, 
    linkTo(methodOn(LocationTypeController.class).all()).withSelfRel().withType("GET"),
    linkTo(methodOn(LocationTypeController.class).save(new LocationType())).withRel("create").withType("POST")
    );
  }
  
   /**
   * Create locationType.
   *
   * @param locationType the locationType
   * @return the locationType
   */
  @PostMapping(path="/location-types")
  ResponseEntity<?> save(@RequestBody @Validated(LocationType.CreateValidation.class) LocationType newLocationType) {
  
    LocationType locationType = repository.save(newLocationType);
    EntityModel<LocationType> entityModel = assembler.toModel(locationType);
  
    return ResponseEntity //
        .created(entityModel.getRequiredLink(IanaLinkRelations.SELF).toUri()) //
        .body(entityModel);
  }

  /**
   * create or update locationType.
   *
   * @param locationType the locationType
   * @return the locationType
   */
  @PutMapping("/location-types/{id}")
  ResponseEntity<?> update(@RequestBody @Validated(LocationType.CreateValidation.class) LocationType newLocationType, @PathVariable UUID id) {

    LocationType updatedLocation = repository.findById(id)
    .map(locationType -> {
      locationType.setName(newLocationType.getName());
      return repository.save(locationType);
    })
    .orElseGet(() -> {
      return repository.save(newLocationType);
    });

  EntityModel<LocationType> entityModel = assembler.toModel(updatedLocation);

  return ResponseEntity //
      .created(entityModel.getRequiredLink(IanaLinkRelations.SELF).toUri()) //
      .body(entityModel);
  }

  /**
   * Get locationType.
   *
   * @param locationType the locationType
   * @return the locationType
   */
  @GetMapping(path="/location-types/{id}")
  public EntityModel<LocationType> one(@PathVariable(value = "id") UUID id) throws EntityNotFoundException {
    LocationType locationType = repository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException());

    return assembler.toModel(locationType);
  }

  /**
   * Delete locationType.
   *
   * @param locationType the locationType
   * @return the locationType
   */
  @DeleteMapping("/location-types/{id}")
  ResponseEntity<?> delete(@PathVariable(value = "id") UUID id) throws EntityNotFoundException {
    LocationType locationType = repository.findById(id)
              .orElseThrow(() -> new EntityNotFoundException());

    repository.delete(locationType);

    return ResponseEntity.noContent().build();
  }
}
